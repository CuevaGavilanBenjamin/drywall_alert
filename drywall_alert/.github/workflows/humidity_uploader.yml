# DryWall Alert - Automatización Cloud
# Workflow que genera y sube datos de humedad cada 10 minutos

name: Humidity Data Uploader

on:
  # Programación automática cada 10 minutos
  schedule:
    - cron: "*/10 * * * *" # Cada 10 minutos

  # Permitir ejecución manual
  workflow_dispatch:
    inputs:
      num_records:
        description: "Número de registros a generar"
        required: false
        default: "50"
        type: string

jobs:
  upload-humidity-data:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🔐 Setup SSH key
        env:
          SFTP_KEY: ${{ secrets.SFTP_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SFTP_KEY" > ~/.ssh/id_rsa_drywall
          chmod 600 ~/.ssh/id_rsa_drywall

          # Agregar host a known_hosts (opcional, para evitar prompts)
          ssh-keyscan -H ${{ secrets.SFTP_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: 📊 Generate humidity data
        env:
          NUM_RECORDS: ${{ github.event.inputs.num_records || '50' }}
        run: |
          timestamp=$(date +"%Y%m%d_%H%M")
          echo "🔄 Generando $NUM_RECORDS registros de humedad..."
          python generate_humidity.py -n $NUM_RECORDS -o "data/humedad_${timestamp}.csv"
          echo "FILENAME=humedad_${timestamp}.csv" >> $GITHUB_ENV
          echo "FILEPATH=data/humedad_${timestamp}.csv" >> $GITHUB_ENV

      - name: 📤 Upload to SFTP server
        env:
          SFTP_HOST: ${{ secrets.SFTP_HOST }}
          SFTP_PORT: ${{ secrets.SFTP_PORT }}
          SFTP_USER: ${{ secrets.SFTP_USER }}
          REMOTE_DIR: ${{ secrets.REMOTE_DIR }}
        run: |
          echo "🚀 Subiendo archivo: $FILENAME"
          python sftp_upload.py "$FILEPATH" \
            --host "$SFTP_HOST" \
            --port "$SFTP_PORT" \
            --user "$SFTP_USER" \
            --key ~/.ssh/id_rsa_drywall \
            --remote-dir "$REMOTE_DIR" \
            --list

      - name: 📋 Upload to ERP Service (opcional)
        if: ${{ secrets.ERP_SERVICE_URL != '' }}
        env:
          ERP_SERVICE_URL: ${{ secrets.ERP_SERVICE_URL }}
        run: |
          echo "📡 Enviando a ERP Service..."
          curl -X POST \
            -F "file=@$FILEPATH" \
            -H "Content-Type: multipart/form-data" \
            "$ERP_SERVICE_URL/file" \
            --fail --show-error --silent | jq '.'

      - name: 🧹 Cleanup sensitive files
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa_drywall
          rm -f "$FILEPATH"
          echo "🗑️ Archivos sensibles eliminados"

      - name: 📊 Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: upload-logs-${{ github.run_number }}
          path: |
            *.log
            evidence/
          retention-days: 30

      - name: 🎉 Success notification
        if: success()
        run: |
          echo "✅ Proceso completado exitosamente"
          echo "📁 Archivo: $FILENAME"
          echo "📅 Timestamp: $(date)"
          echo "🔄 Run ID: ${{ github.run_id }}"
